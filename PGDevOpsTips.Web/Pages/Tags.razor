@page "/tags/{tagName}"
@using Microsoft.Extensions.Configuration
@using PGDevOpsTips.Domain.Models;
@using Services
@using System.Threading
@inject IConfiguration Configuration
@inject RestContentService RestContentService

@if (!tagViewModel.Contents.Any())
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <p><em>Loading...</em></p>
            </div>
        </div>
    </div>
}
else
{

    <HeaderComponent H1="Tags"
                     Line1=@($"Everything I have about {tagViewModel.Tag}") />

    var backgroundCount = 1;

    @foreach (var content in tagViewModel.Contents)
    {
        <div class="container-fluid list-item-background-@backgroundCount">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <h2><a href="/@content.Type.ToString()/@content.WebPath.ToLower()" title="@content.Description">@content.Title</a></h2>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-8">
                        <p>@content.Published.ToString("dd MMM yyyy")</p>
                        <p>
                            @* TODO: Fix selection when clicking in this page *@
                            <TagsList Categories="@content.Categories" />
                        </p>
                        <p>@content.Description</p>
                        <p><a href="/@content.Type.ToString()/@content.WebPath.ToLower()" title="@content.Description" class="btn btn-light">Read now <i class="fas fa-angle-double-right" aria-hidden="true"></i></a></p>
                    </div>
                    <div class="col-md-4 d-none d-lg-block">
                        <img src="@content.Thumbnail" class="img-fluid list-item-thumbnail" alt="@content.Title">
                    </div>
                </div>
            </div>
        </div>

        {
            backgroundCount = backgroundCount + 1;
        }
    }
}

@code {

    [Parameter]
    public string TagName { get; set; }

    private List<Content> tags = new List<Content>();

    private TagViewModel tagViewModel { get; set; } = new TagViewModel();

    private int tagsPerPage = 5;

    private int currentPageNumber = 1;

    private int pages;

    protected override async Task OnParametersSetAsync()
    {
        tagViewModel.Tag = TagName;
        tagViewModel.Contents = new List<Content>();
        tags = await RestContentService.GetContentsList(Configuration["Content:ContentsListApiPath"], default);
        tags = tags.Where(a => a.Categories.ToLowerInvariant().Contains(TagName)).ToList();
        Setup();
    }

    private void Setup()
    {

        tagViewModel.Contents = tags.Take(tagsPerPage).ToList();
        var pagesDec = (double)tags.Count / (double)tagsPerPage;
        pages = Convert.ToInt16(Math.Ceiling(pagesDec));
        currentPageNumber = 1;
    }

    private void ChangePage(int page)
    {
        currentPageNumber = page;
        tagViewModel.Contents = tags.Skip((page - 1) * tagsPerPage).Take(tagsPerPage).ToList();
    }

    private async Task EnableDrafts()
    {
        tags = await RestContentService.GetContentsList(Configuration["Content:ContentsListApiPath"] + "?drafts=true", default);
        tags = tags.Where(a => a.Categories.ToLowerInvariant().Contains(TagName)).ToList();
        Setup();
    }
}
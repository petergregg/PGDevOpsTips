@page "/resources"
@using Microsoft.Extensions.Configuration
@using PGDevOpsTips.Domain.Models;
@using Services
@using System.Threading
@inject IConfiguration Configuration
@inject RestContentService RestContentService

<HeaderComponent H1="Resources"
                 Line1="A place where I share topics in blog resources about technical things I have found useful and hope you will too. Everytime I learn something new, I will share it here."
                 Line2="All my resources are written on <a href='https://github.com/petergregg/Content/tree/main/Blog/Resources' target='_blank'><i class='fab fa-github fa-lg' aria-hidden='true'></i> GitHub</a>."
                 Line3="You can raise issues, create pull requests or even fork the content... its open source." />

@if (!resourcesViewModel.Resources.Any())
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <p><em>Loading...</em></p>
            </div>
        </div>
    </div>
}
else
{

    var backgroundCount = 1;

    @foreach (var resource in resourcesViewModel.Resources)
    {
        <div class="container-fluid list-item-background-@backgroundCount">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <h2><a href="/resource/@resource.WebPath.ToLower()" title="@resource.Description">@resource.Title</a></h2>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-8">
                        <p>@resource.Published.ToString("dd MMM yyyy")</p>
                        <p>
                            <TagsList Categories="@resource.Categories" />
                        </p>
                        <p>@resource.Description</p>
                        <p><a href="/resource/@resource.WebPath.ToLower()" title="@resource.Description" class="btn btn-light">Read now <i class="fas fa-angle-double-right" aria-hidden="true"></i></a></p>
                    </div>
                    <div class="col-md-4 d-none d-lg-block">
                        <img src="@resource.Thumbnail" class="img-fluid list-item-thumbnail" alt="@resource.Title">
                    </div>
                </div>
            </div>
        </div>

        {
            backgroundCount = backgroundCount + 1;
        }
    }
}

<div class="comment-container">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <p>@resources.Count resources avaliable. By default, you'll only see published resources, but you can also <a href="/resources" @onclick=(EnableDrafts)>view drafts</a></p>
                <p>
                    <div class="btn-toolbar" role="toolbar" aria-label="Paging buttons">
                        <div class="btn-group me-2" role="group" aria-label="First group">
                            @for (int p = 1; p <= pages; p++)
                            {
                                var thisPage = p;
                                <button class="btn btn-secondary me-3" @onclick="@(e => ChangePage(thisPage))">@p</button>
                            }
                        </div>
                    </div>
                </p>
                <p>@currentPageNumber of @pages</p>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Content> resources = new List<Content>();

    ResourcesViewModel resourcesViewModel { get; set; } = new ResourcesViewModel();

    private int resourcesPerPage = 5;

    private int currentPageNumber = 1;

    private int pages;

    protected override async Task OnInitializedAsync()
    {
        resourcesViewModel.Resources = new List<Content>();
        resources = await RestContentService.GetContentsList(Configuration["Content:ContentsListApiPath"] + "?type=resource", default);
        Setup();
    }

    private void Setup()
    {

        resourcesViewModel.Resources = resources.Take(resourcesPerPage).ToList();
        var pagesDec = (double)resources.Count / (double)resourcesPerPage;
        pages = Convert.ToInt16(Math.Ceiling(pagesDec));
        currentPageNumber = 1;
    }

    private void ChangePage(int page)
    {
        currentPageNumber = page;
        resourcesViewModel.Resources = resources.Skip((page - 1) * resourcesPerPage).Take(resourcesPerPage).ToList();
    }

    private async Task EnableDrafts()
    {
        resources = await RestContentService.GetContentsList(Configuration["Content:ContentsListApiPath"] + "?type=resource&drafts=true", default);
        Setup();
    }
}
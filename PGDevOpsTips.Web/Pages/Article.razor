@page "/article/{ArticleWebPath}"
@using Microsoft.Extensions.Configuration
@using PGDevOpsTips.Web.Services;
@using PGDevOpsTips.Domain.Models
@using System.Threading
@inject IConfiguration Configuration
@inject RestContentService RestContentService

@if (loading)
{
    <div class="container content-container">
        <div class="row">
            <div class="col-md-12">
                <p><em>Loading</em></p>
            </div>
        </div>
    </div>
}
else
{
    <PageTitle>@articleViewModel.Article.Title | Peter Gregg</PageTitle>

    <HeadContent>
        <meta name="description" content="@articleViewModel.Article.Description">
    </HeadContent>

    <HeaderComponent H1=@articleViewModel.Article.Title
                     Line1=@articleViewModel.Article.Published.ToLongDateString()
                     Line2=@articleViewModel.Article.Description
                     Line3=@articleGitHubUrlText
                     Tags=@articleViewModel.Article.Categories />

    <div class="content-container">
        <div class="container">
            @((MarkupString)articleContents)
        </div>

    
    </div>

    <div class="container-fluid">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <a href="articles" class="btn btn-primary"><i class="fas fa-angle-double-left" aria-hidden="true"></i> See all articles</a>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid list-item-background-1">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <h2>Got a comment?</h2>
                    <p>All my articles are written and managed as Markdown files on <a href=@($"{@Configuration["Content:GitHubContentRepo"]}{@articleViewModel.Article.GitHubUrl}") target="_blank"><i class="fab fa-github fa-lg" aria-hidden="true"></i> GitHub</a>.</p>
                    <p>Please add an issue or submit a pull request if something is not right on this article or you have a comment.</p>
                    <p>If you'd like to simply say "thanks", then please send me a <a href="@Configuration["Personalise:TwitterUrl"]" target="_blank"><i class="fab fa-twitter fa-lg" aria-hidden="true"></i></a> so the rest of Twitter can see how awesome my work is.</p>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string ArticleWebPath { get; set; }

    private string articleContents;

    private bool loading;

    private string articleGitHubUrlText;

    ArticleViewModel articleViewModel { get; set; } = new ArticleViewModel();

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        articleViewModel.Article = new Content();
        articleViewModel.Article = await RestContentService.GetContent(Configuration["Content:ContentsListApiPath"] + "/content?type=article&property=WebPath&value=" + ArticleWebPath + "&drafts=true", default);
        if (articleViewModel.Article == default)
        {
            throw new NullReferenceException($"No article with WebPath {ArticleWebPath}");
        }

        articleContents = await RestContentService.GetBlobContent(Configuration["Content:ContentApiPath"] + "?blobname=" + articleViewModel.Article.HtmlBlobFileName, default);

        //Remove h1 if the article starts with it. This is because the h1 is in the header so it will be duplicated
        if (articleContents.ToLowerInvariant().StartsWith("<h1"))
        {
            articleContents = articleContents.Substring(articleContents.ToLowerInvariant().IndexOf("</h1>"));
        }

        articleGitHubUrlText = $"This article is published at <a href='{articleViewModel.Article.GitHubUrl}' target='_blank' ><i class='fab fa-github fa-lg' aria-hidden='true'></i> GitHub</a>.You can raise issues, create pull requests or even fork the content...its open source.";

        loading = false;
    }
}